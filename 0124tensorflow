#mutivariable

import tensorflow as tf

x1_data = [73., 93., 89., 96., 73]             #행렬이용안하면 이렇게 안이쁘게됨. 
x2_data = [80., 88., 91., 98., 66.]
x3_data = [75., 93., 90., 100., 70.]
y_data = [152., 185., 180., 196., 142.]

x1 = tf.placeholder(tf.float32)
x2 = tf.placeholder(tf.float32)
x3 = tf.placeholder(tf.float32)

Y = tf.placeholder(tf.float32)

w1 = tf.Variable(tf.random_normal([1]), name='weight1')   
w2 = tf.Variable(tf.random_normal([1]), name='weight2')
w3 = tf.Variable(tf.random_normal([1]), name='weight3')
b = tf.Variable(tf.random_normal([1]), name='bias')

hypothesis = x1 * w1 + x2 * w2 + x3 * w3 + b

cost = tf.reduce_mean(tf.square(hypothesis - Y))

optimizer = tf.train.GradientDescentOptimizer(learning_rate = 1e-5)
train = optimizer.minimize(cost)

sess = tf.Session()
sess.run(tf.global_variables_initializer())

for step in range(2001):
    cost_val, hy_val, _ = sess.run([cost, hypothesis, train],
                                  feed_dict={x1: x1_data, x2: x2_data, x3: x3_data, Y: y_data})
    if step % 10 == 0:
        print(step, "cost:=", cost_val, "\nPrediction:\n", hy_val        #\n:줄바꿈
===============================================
#using matrix for multivariable linear regression

import tensorflow as tf

x_data = [[73., 80., 75.], [93., 88., 93.], [89., 91., 90.],     #matrix의장점!간단히!
         [96., 98., 100.], [73., 66., 70.]]
y_data = [[152.], [185.], [180.], [196.], [142.]]

X = tf.placeholder(tf.float32, shape=[None, 3])
Y = tf.placeholder(tf.float32, shape=[None, 1])

W = tf.Variable(tf.random_normal([3, 1]), name='weight')
b = tf.Variable(tf.random_normal([1]), name='bias')

hypothesis = tf.matmul(X, W) + b                                             #matrix!!  H=X*W   X가먼저!
cost = tf.reduce_mean(tf.square(hypothesis - Y))

optimizer = tf.train.GradientDescentOptimizer(learning_rate=1e-5)
train = optimizer.minimize(cost)

sess = tf.Session()
sess.run(tf.global_variables_initializer())

for step in range(2001):
    cost_val, hy_val, _ = sess.run(
        [cost, hypothesis, train], feed_dict={X: x_data, Y: y_data})
    if step % 10 == 0:
        print(step, "coooost:", cost_val, "\nprediction:\n", hy_val
 ================================================
 #데이터양많을때는 QueueRunners 이용
 
import tensorflow as tf

filename_queue = tf.train.string_input_producer(
    ['jangho.csv'], shuffle=False, name='filename_queue')      #여러파일들집합에 filename설정

reader = tf.TextLineReader()
key, value = reader.read(filename_queue)       #파일집합에서 key, value 읽어오기.

       #그리고 각각데이터타입은이럼.
record_defaults = [[0.], [0.], [0.], [0.]]                #그리고 각각데이터타입은이럼.
xy = tf.decode_csv(value, record_defaults = record_defaults)        #value를 csv로디코드 
                                                           

train_x_batch, train_y_batch = tf.train.batch([xy[0:-1], xy[-1:]], batch_size=10)      #batch로 데이터10개씩퍼오기



X = tf.placeholder(tf.float32, shape=[None, 3])
Y = tf.placeholder(tf.float32, shape=[None, 1])

W = tf.Variable(tf.random_normal([3, 1]), name='weight')    #shape XYWb 신경쓰기
b = tf.Variable(tf.random_normal([1]), name='bias')

hypothesis = tf.matmul(X, W) + b

cost = tf.reduce_mean(tf.square(hypothesis - Y))

optimizer = tf.train.GradientDescentOptimizer(learning_rate=1e-5)
train = optimizer.minimize(cost)

sess = tf.Session()
sess.run(tf.global_variables_initializer())

coord = tf.train.Coordinator()                 #해줘야함. 암기 ㄱㄱ
threads = tf.train.start_queue_runners(sess=sess, coord=coord)

for step in range(2001):
    x_batch, y_batch = sess.run([train_x_batch, train_y_batch])
    cost_val, hy_val, _ = sess.run([cost, hypothesis, train],
                                  feed_dict={X: x_batch, Y: y_batch})
    if step % 100 == 0:
        print(step, "cost!!: ", cost_val, "\npredicition\n", hy_val)

coord.request_stop()         #얘네도 해줘야함ㄱㄱ
coord.join(threads)


 
