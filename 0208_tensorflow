import tensorflow as tf

x_data = [[1, 2, 1, 1],[2, 1, 3, 2], [3, 1, 3, 4], [4, 1, 5, 5], [1, 7, 5, 5], [1, 2, 5, 6],[1, 6, 6, 6],[1, 7, 7, 7]]
y_data = [[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 1, 0], [0, 1, 0],[0, 1, 0],[1, 0, 0],[1, 0, 0]]

X = tf.placeholder("float", [None, 4])                 #shape 신경쓰기
Y = tf.placeholder("float", [None, 3])                     
nb_classes = 3

W = tf.Variable(tf.random_normal([4, nb_classes]),name='weight')
b = tf.Variable(tf.random_normal([nb_classes]), name='bias')

hypothesis = tf.nn.softmax(tf.matmul(X, W) + b)

cost = tf.reduce_mean(-tf.reduce_sum(Y * tf.log(hypothesis), axis=1))   #axis=1은 matmul이 아니고 같은 element의 곱을 의미=element wise
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(cost)

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    
    for step in range(2001):
        sess.run(optimizer, feed_dict={X: x_data, Y: y_data})
        if step % 200 == 0:
            print(step, sess.run(cost, feed_dict={X: x_data, Y: y_data}))
    
    a = sess.run(hypothesis, feed_dict={X: [[1, 11, 7, 9]]})
    print( a, sess.run(tf.arg_max(a, 1)))            #a중에 1빠따로 높은 숫자의 array출력
    
    =====================================================================================
logits = tf.matmul(X, W) + b

hypothesis = tf.nn.softmax(logits)
cost = tf.reduce_mean(-tf.reduce_sum(Y * tf.log(hypothesis), axis=1))

#=크로스_엔트로피 함수가 제공됨. 편리하게 가능.

cost_i = tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=Y_one_hot)
cost = tf.reduce_mean(cost_i)

====================================================================
import tensorflow as tf
import numpy as np
xy = np.loadtxt('data-04-zoo.csv', delimiter=',', dtype=np.float32)
x_data = xy[:, 0:-1]
y_data = xy[:, [-1]]

nb_classes = 7                                     #0~6 총 7개의 one-hot 가짓수.

X = tf.placeholder(tf.float32, [None, 16])
Y = tf.placeholder(tf.int32, [None, 1])

Y_one_hot = tf.one_hot(Y, nb_classes)              #onehotencoding 대신에 차원이하나 추가
Y_one_hot = tf.reshape(Y_one_hot, [-1,nb_classes]) #reshape=>차원 낮추기

W = tf.Variable(tf.random_normal([16, nb_classes]), name='weight')
b = tf.Variable(tf.random_normal([nb_classes]), name='bias')

logits = tf.matmul(X, W) + b
hypothesis = tf.nn.softmax(logits)

cost_i = tf.nn.softmax_cross_entropy_with_logits(logits=logits,
                                                labels=Y_one_hot)
cost = tf.reduce_mean(cost_i)
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(cost)

prediction = tf.argmax(hypothesis, 1)                               #[[0.7],[0.2],[0.1]]--->0반납.
correct_prediction = tf.equal(prediction, tf.argmax(Y_one_hot, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))  #cast함수:true이면1, false이면0

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    
    for step in range(2000):
        sess.run(optimizer, feed_dict={X: x_data, Y: y_data})
        if step % 100 == 0:
            loss, acc = sess.run([cost, accuracy], feed_dict={X: x_data, Y: y_data})
            print(step, loss, acc)
    
    pred = sess.run(prediction, feed_dict={X: x_data})
    
    for p, y in zip(pred, y_data.flatten()):     #[[1],[0]] 를 [1,0]으로 평평하게, 예측한 W로 원레데이터 예측,비교.
        print("[{}] prediction: {} True Y: {}".format(p == int(y),p ,int(y)))
